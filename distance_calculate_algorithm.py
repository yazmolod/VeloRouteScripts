# -*- coding: utf-8 -*-

"""
/***************************************************************************
 VeloRouteClass
                                 A QGIS plugin
 some description
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-02-15
        copyright            : (C) 2022 by yazmolod
        email                : yazmolod@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
__author__ = 'yazmolod'
__date__ = '2022-02-15'
__copyright__ = '(C) 2022 by yazmolod'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from qgis.PyQt.QtCore import QCoreApplication
from qgis.core import (
    QgsMapLayer,
    QgsProcessing,
    QgsFeatureSink,
    QgsProcessingAlgorithm,
    QgsProcessingParameterFeatureSource,
    QgsProcessingParameterDefinition,
    QgsProcessingParameterMapLayer,
    QgsProcessingParameterMultipleLayers,
    QgsProcessingParameterBoolean,
    QgsProcessingParameterFeatureSink,
    QgsWkbTypes,
    QgsProcessingParameterNumber,
    QgsFields,
    QgsField,
    QgsCoordinateTransform,
    QgsProject,
    QgsFeature,
    )
from qgis.PyQt.QtCore import QVariant
from .framework import VeloGraph, iter_destination_features, TARGET_CRS, DISTANCE_CALCULATOR


class DistanceCalculateAlgorithm(QgsProcessingAlgorithm):
    """
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    PATHS_OUTPUT = 'PATHS_OUTPUT'
    SIGN_INPUT = 'SIGN_INPUT'
    ROADS_INPUT = 'ROADS_INPUT'
    POIS_INPUT = 'POIS_INPUT'
    TOLERANCE = 'TOLERANCE'

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """
        self.addParameter(
            QgsProcessingParameterMapLayer(
                self.SIGN_INPUT,
                self.tr('Слой с носителями'),
                QgsProcessing.TypeVectorPoint
            )
        )        
        self.addParameter(
            QgsProcessingParameterMultipleLayers(
                self.POIS_INPUT,
                self.tr('Слои с объектами'),
                QgsProcessing.TypeVectorPoint
            )
        )        
        self.addParameter(
            QgsProcessingParameterMultipleLayers(
                self.ROADS_INPUT,
                self.tr('Слои с дорогами'),
                QgsProcessing.TypeVectorLine
            )
        )    
        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.PATHS_OUTPUT,
                self.tr('Кратчайшие пути'),
                type=QgsProcessing.TypeVectorLine
            )
        )

        advanced_params = []
        advanced_params.append(QgsProcessingParameterNumber(self.TOLERANCE,
                                                   self.tr('Topology tolerance'),
                                                   QgsProcessingParameterNumber.Double,
                                                   0.0, False, 0, 99999999.99))
        for p in advanced_params:
            p.setFlags(p.flags() | QgsProcessingParameterDefinition.FlagAdvanced)
            self.addParameter(p)



    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """
        sign_layer = self.parameterAsLayer(parameters, self.SIGN_INPUT, context)
        roads_layers = self.parameterAsLayerList(parameters, self.ROADS_INPUT, context)
        poi_layers = self.parameterAsLayerList(parameters, self.POIS_INPUT, context)
        tolerance = self.parameterAsDouble(parameters, self.TOLERANCE, context)
        
        graph = VeloGraph(roads_layers, [sign_layer]+poi_layers, tolerance, feedback)
        
        path_fields = QgsFields()
        path_fields.append(QgsField('id', QVariant.Int))
        path_fields.append(QgsField('length', QVariant.Double))
        path_sink, path_dest_id = self.parameterAsSink(parameters, self.PATHS_OUTPUT,
                context, path_fields, QgsWkbTypes.LineString, TARGET_CRS)


        # Compute the number of steps to display within the progress bar and
        # get features from source
        feedback.setProgress(0)
        total = 100.0 / (sign_layer.featureCount()*4) if sign_layer.featureCount() else 0
        
        fid = 0
        sign_layer.startEditing()
        for iter_result in iter_destination_features(sign_layer, poi_layers, feedback):
            # если была нажата кнопка cancel - прерываемся
            if feedback.isCanceled():
                break
            # распаковка результатов (в процессе работы все время меняется, сделал так ля удобства)
            poi_layer, poi_feature, sign_feature, sign_field_name = iter_result
            # собираем имена полей с которыми будем работать
            sign_position = sign_field_name[-2]
            sign_direction = sign_field_name[-1]
            sign_eng_field = 'NameEN{}{}'.format(sign_position, sign_direction)
            sign_km_field = 'km_{}{}'.format(sign_position, sign_direction)
            sign_pic_field = 'PIC_{}{}'.format(sign_position, sign_direction)

            if poi_feature is None:
                sign_feature[sign_eng_field] = 'N/A'
                sign_feature[sign_km_field] = 'N/A'
                sign_feature[sign_pic_field] = 'N/A'                
            else:
                # copy eng name field and pic field
                sign_feature[sign_eng_field] = poi_feature['NameEN']
                sign_feature[sign_pic_field] = poi_feature['pic']
                # fill distance field
                # project points to epsg 4326
                sign_xform = QgsCoordinateTransform(sign_layer.sourceCrs(), TARGET_CRS, QgsProject.instance())
                sign_geometry = sign_feature.geometry()
                sign_geometry.transform(sign_xform)
                poi_xform = QgsCoordinateTransform(poi_layer.sourceCrs(), TARGET_CRS, QgsProject.instance())
                poi_geometry = poi_feature.geometry()
                poi_geometry.transform(poi_xform)
                # calc shortest path
                vertex_ids = graph.shortest_path(sign_geometry.asPoint(), poi_geometry.asPoint())
                if not vertex_ids:
                    feedback.pushInfo('[processAlgorithm] Cannot build shortest path')
                    sign_feature[sign_km_field] = 'N/A'
                else:
                    feedback.pushInfo('[processAlgorithm] Shortest path calculated')
                    path_line = graph.path_vector(vertex_ids)
                    path_length = DISTANCE_CALCULATOR.measureLength(path_line)
                    sign_feature[sign_km_field] = self.format_length(path_length)
                    # make path feature
                    path_feature = QgsFeature()
                    path_feature.setFields(path_fields)
                    path_feature.setGeometry(path_line)
                    path_feature['id'] = fid
                    path_feature['length'] = path_length
                    path_sink.addFeature(path_feature, QgsFeatureSink.FastInsert)
                    # Update the progress bar
                    feedback.setProgress(int(fid * total))
                    fid += 1    
            sign_layer.updateFeature(sign_feature)
        sign_layer.commitChanges()
        return {self.PATHS_OUTPUT: path_dest_id}

    def format_length(self, length):
        km = length / 1000
        if km >= 10:
            formatted_km = str(int(km))
        else:
            formatted_km = str(round(km, 1)).replace('.0', '')
        return formatted_km
    

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'DistanceCalculate'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Group1'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return DistanceCalculateAlgorithm()
